import User from "../models/userModel.js";
import nodemailer from "nodemailer";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { checkPassword } from "./Users.js";

export const SendEmail = async (req, res) => {
   // –í–∞–ª–∏–¥–∞—Ü–∏—è email
   const { email } = req.body;
   if (email === '') return res.status(400).json({ email_invalid: '–í–≤–µ–¥–∏—Ç–µ email' });
   let getUser = await checkEmail(email);
   if (typeof getUser === 'string') return res.status(400).json({ email_invalid: getUser });

   try {
      const userId = getUser.id;
      const name = getUser.lastname + ' ' + getUser.firstname;
      const email = getUser.email;
      const role = getUser.role;

      const accessToken = jwt.sign({ userId, name, email, role }, process.env.ACCESS_TOKEN_SECRET, {
         expiresIn: '30m'
      });
      const refreshToken = jwt.sign({ userId, name, email, role }, process.env.REFRESH_TOKEN_SECRET, {
         expiresIn: '1d'
      });
      await User.update({ refresh_token: refreshToken }, {
         where: {
            id: userId
         }
      });

      const transporter = nodemailer.createTransport({
         service: 'gmail',
         auth: {
            user: `${process.env.EMAIL_ADDRESS}`,
            pass: `${process.env.EMAIL_PASSWORD}`,
         },
      });

      const mailOptions = {
         from: 'Cinemax üéû <cinemax@gmail.com>',
         to: `${email}`,
         subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
         text:
            '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã (–∏–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π) –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n\n'
            + '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–µ –≤ —Å–≤–æ–π –±—Ä–∞—É–∑–µ—Ä, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å::\n\n'
            + `http://localhost:3000/resetPassword/${refreshToken}\n\n`
            + '–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∏ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.\n',
      };


      transporter.sendMail(mailOptions, (err, response) => {
         if (err) {
            console.error('there was an error: ', err);
         } else {
            res.status(200).json({ success: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
         }
      });
   } catch (error) {
      console.log(error);
   }
}

const checkEmail = async (email) => {
   let emailFilter = /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/;
   if (!emailFilter.test(email)) return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";

   let user = await User.findOne({
      where: {
         email: email
      }
   });
   if (user === null) return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";

   return user;
}

export const resetPassword = async (req, res) => {
   let user = await User.findOne({
      where: {
         refresh_token: req.query.resetToken
      }
   });

   if (user == null) {
      return res.status(403).json({ token_error: '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' });
   } else {
      return res.status(200);
   }
}
export const changePassword = async (req, res) => {
   let { resetToken, password, confPassword } = req.body;
   let user = await User.findOne({
      where: {
         refresh_token: resetToken
      }
   });

   if (user == null) {
      return res.status(403).json({ token_error: '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' });
   } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
      let validPassword = checkPassword(password);
      if (validPassword) return res.status(400).json({ error_password: validPassword });
      if (password !== confPassword) return res.status(400).json({ password_do_not_match: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç" });
      const salt = await bcrypt.genSalt();
      const hashPassword = await bcrypt.hash(password, salt);

      await User.update({ password: hashPassword, refresh_token: null }, {
         where: {
            id: user.id
         }
      })
         .then(() => {
            res.status(200).json({ done: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!' });
         });

   }
}